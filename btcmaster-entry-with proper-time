#property strict

string labelName = "ultradeforex_dlable20";
datetime lastBarTime = 0;
string prevSignal = "";
string currentSignal = "";

input double lotSize = 0.01;              // Set your lot size here
input bool enableTradingHours = true;     // Master toggle
input bool allowFridayTrading = true;     // Allow trading on Fridays

// Morning Session Settings
input bool allowMorningTrade = true;
input int morningStartHour = 3;
input int morningStartMinute = 0;
input int morningEndHour = 8;
input int morningEndMinute = 59;

// Afternoon Session Settings
input bool allowAfternoonTrade = true;
input int afternoonStartHour = 9;
input int afternoonStartMinute = 0;
input int afternoonEndHour = 14;
input int afternoonEndMinute = 59;

// Evening Session Settings
input bool allowEveningTrade = true;
input int eveningStartHour = 15;
input int eveningStartMinute = 0;
input int eveningEndHour = 23;
input int eveningEndMinute = 0;

bool IsOpenTradeAllowed()
{
    if (!enableTradingHours)
        return true;

    int dayOfWeek = TimeDayOfWeek(TimeCurrent());
    if (!allowFridayTrading && dayOfWeek == 5)
        return false;

    datetime now = TimeCurrent();
    int hour = TimeHour(now);
    int minute = TimeMinute(now);

    if (allowMorningTrade && IsInTimeRange(hour, minute, morningStartHour, morningStartMinute, morningEndHour, morningEndMinute))
        return true;

    if (allowAfternoonTrade && IsInTimeRange(hour, minute, afternoonStartHour, afternoonStartMinute, afternoonEndHour, afternoonEndMinute))
        return true;

    if (allowEveningTrade && IsInTimeRange(hour, minute, eveningStartHour, eveningStartMinute, eveningEndHour, eveningEndMinute))
        return true;

    return false;
}

bool IsInTimeRange(int hour, int minute, int startH, int startM, int endH, int endM)
{
    int current = hour * 60 + minute;
    int start = startH * 60 + startM;
    int end = endH * 60 + endM;
    return (current >= start && current <= end);
}

int OnInit()
{
    Print("EA initialized");
    lastBarTime = 0;
    return(INIT_SUCCEEDED);
}

void OnDeinit(const int reason)
{
    Print("EA deinitialized");
}

void OnTick()
{
    datetime currentBarTime = iTime(Symbol(), PERIOD_CURRENT, 0);
    if (currentBarTime != lastBarTime)
    {
        lastBarTime = currentBarTime;

        prevSignal = currentSignal;
        currentSignal = "";

        if (ObjectFind(0, labelName) >= 0)
        {
            currentSignal = StringTrimLeft(StringTrimRight(ObjectGetString(0, labelName, OBJPROP_TEXT)));

            Print("Previous Signal: ", prevSignal, " | Current Signal: ", currentSignal);

            if ((currentSignal == "BUY" && prevSignal == "SELL") || (currentSignal == "SELL" && prevSignal == "BUY"))
            {
                int totalTrades = OrdersTotal();
                bool buyExists = false;
                bool sellExists = false;
                int buyTicket = -1;
                int sellTicket = -1;

                for (int i = 0; i < totalTrades; i++)
                {
                    if (OrderSelect(i, SELECT_BY_POS, MODE_TRADES))
                    {
                        if (OrderSymbol() == Symbol())
                        {
                            if (OrderType() == OP_BUY)
                            {
                                buyExists = true;
                                buyTicket = OrderTicket();
                            }
                            else if (OrderType() == OP_SELL)
                            {
                                sellExists = true;
                                sellTicket = OrderTicket();
                            }
                        }
                    }
                }

                if (currentSignal == "BUY")
                {
                    Print("Signal: BUY");

                    if (sellExists)
                        CloseOrder(sellTicket);

                    if (!buyExists && IsOpenTradeAllowed())
                        OpenOrder(OP_BUY);
                    else if (!buyExists)
                        Print("Not allowed to open BUY trade now. Time restrictions in place.");
                }
                else if (currentSignal == "SELL")
                {
                    Print("Signal: SELL");

                    if (buyExists)
                        CloseOrder(buyTicket);

                    if (!sellExists && IsOpenTradeAllowed())
                        OpenOrder(OP_SELL);
                    else if (!sellExists)
                        Print("Not allowed to open SELL trade now. Time restrictions in place.");
                }
            }
            else
            {
                Print("No signal change or invalid signal. No action taken.");
            }
        }
        else
        {
            Print("Label '", labelName, "' not found on the chart");
        }
    }
}

void CloseOrder(int ticket)
{
    if (ticket < 0)
        return;

    if (OrderSelect(ticket, SELECT_BY_TICKET))
    {
        double closePrice = 0;
        int cmd = OrderType();
        if (cmd == OP_BUY)
            closePrice = MarketInfo(OrderSymbol(), MODE_BID);
        else if (cmd == OP_SELL)
            closePrice = MarketInfo(OrderSymbol(), MODE_ASK);
        else
            return;

        bool result = OrderClose(ticket, OrderLots(), closePrice, 3, clrRed);
        if (result)
            Print("Closed order #", ticket);
        else
            Print("Failed to close order #", ticket, " Error: ", GetLastError());
    }
}

void OpenOrder(int orderType)
{
    double price = 0;
    if (orderType == OP_BUY)
        price = MarketInfo(Symbol(), MODE_ASK);
    else if (orderType == OP_SELL)
        price = MarketInfo(Symbol(), MODE_BID);
    else
        return;

    int ticket = OrderSend(Symbol(), orderType, lotSize, price, 3, 0, 0, "Signal trade", 0, 0, clrGreen);
    if (ticket > 0)
        Print("Opened ", orderType == OP_BUY ? "BUY" : "SELL", " order #", ticket);
    else
        Print("Failed to open ", orderType == OP_BUY ? "BUY" : "SELL", " order. Error: ", GetLastError());
}
