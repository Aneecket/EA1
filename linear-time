#include <Trade\Trade.mqh>
CTrade trade;

input string IndicatorName = "LT";   // Indicator file name
input double LotSize = 0.01;

// --- Trading time windows ---
input bool AllowMorningTrade = true;
input int MorningStartHour = 3;
input int MorningStartMinute = 0;
input int MorningEndHour = 7;
input int MorningEndMinute = 59;

input bool AllowAfternoonTrade = true;
input int AfternoonStartHour = 8;
input int AfternoonStartMinute = 0;
input int AfternoonEndHour = 12;
input int AfternoonEndMinute = 59;

input bool AllowEveningTrade = false;
input int EveningStartHour = 13;
input int EveningStartMinute = 0;
input int EveningEndHour = 17;
input int EveningEndMinute = 59;

input bool AllowFridayTrading = true;

int handle;
datetime lastBarTime = 0;

int OnInit()
{
   handle = iCustom(_Symbol, PERIOD_CURRENT, IndicatorName);
   if(handle == INVALID_HANDLE)
   {
      Print("Failed to load indicator: ", IndicatorName);
      return(INIT_FAILED);
   }

   lastBarTime = iTime(_Symbol, PERIOD_CURRENT, 0);
   return(INIT_SUCCEEDED);
}

bool IsWithinTimeWindow(int startH, int startM, int endH, int endM, int hour, int min)
{
   int currentMinutes = hour * 60 + min;
   int startMinutes = startH * 60 + startM;
   int endMinutes = endH * 60 + endM;
   return (currentMinutes >= startMinutes && currentMinutes <= endMinutes);
}

bool IsAllowedToTrade(int hour, int min, int dayOfWeek)
{
   if (!AllowFridayTrading && dayOfWeek == 5) // 5 = Friday
      return false;

   if (AllowMorningTrade && IsWithinTimeWindow(MorningStartHour, MorningStartMinute, MorningEndHour, MorningEndMinute, hour, min))
      return true;

   if (AllowAfternoonTrade && IsWithinTimeWindow(AfternoonStartHour, AfternoonStartMinute, AfternoonEndHour, AfternoonEndMinute, hour, min))
      return true;

   if (AllowEveningTrade && IsWithinTimeWindow(EveningStartHour, EveningStartMinute, EveningEndHour, EveningEndMinute, hour, min))
      return true;

   return false;
}

void OnTick()
{
   datetime currentTime = TimeCurrent();
   MqlDateTime tm;
   TimeToStruct(currentTime, tm);
   int hour = tm.hour;
   int minute = tm.min;
   int dayOfWeek = tm.day_of_week;

   datetime currentBarTime = iTime(_Symbol, PERIOD_CURRENT, 0);
   if(currentBarTime == lastBarTime)
      return;

   lastBarTime = currentBarTime;

   // Buffers
   double buffer1[], buffer2[], buffer3[], buffer4[], buffer5[], buffer6[];

   if(CopyBuffer(handle, 1, 1, 3, buffer1) < 0) return;
   if(CopyBuffer(handle, 2, 1, 3, buffer2) < 0) return;
   if(CopyBuffer(handle, 3, 1, 3, buffer3) < 0) return;
   if(CopyBuffer(handle, 4, 1, 3, buffer4) < 0) return;
   if(CopyBuffer(handle, 5, 1, 3, buffer5) < 0) return;
   if(CopyBuffer(handle, 6, 1, 3, buffer6) < 0) return;

   double open1 = iOpen(_Symbol, PERIOD_CURRENT, 1);
   double close1 = iClose(_Symbol, PERIOD_CURRENT, 1);
   double close2 = iClose(_Symbol, PERIOD_CURRENT, 2);

   bool hasPosition = PositionSelect(_Symbol);

   // === ENTRY LOGIC ===
   if(!hasPosition)
   {
      if(!IsAllowedToTrade(hour, minute, dayOfWeek))
      {
         Print("This is not an allowed trading time... No trades will be opened.");
         return;
      }

      if(buffer5[0] != EMPTY_VALUE && open1 < buffer5[0] && close1 > buffer5[0])
      {
         if(trade.Buy(LotSize, _Symbol))
            Print("BUY opened at candle close. Buffer5=", buffer5[0]);
         else
            Print("Failed to open BUY. Error: ", GetLastError());
      }

      if(buffer2[0] != EMPTY_VALUE && open1 > buffer2[0] && close1 < buffer2[0])
      {
         if(trade.Sell(LotSize, _Symbol))
            Print("SELL opened at candle close. Buffer2=", buffer2[0]);
         else
            Print("Failed to open SELL. Error: ", GetLastError());
      }
   }

   // === EXIT LOGIC (ALLOWED ANYTIME) ===
   else
   {
      ENUM_POSITION_TYPE type = (ENUM_POSITION_TYPE)PositionGetInteger(POSITION_TYPE);

      if(type == POSITION_TYPE_BUY)
      {
         if(buffer1[0] != EMPTY_VALUE && open1 < buffer1[0] && close1 > buffer1[0])
         {
            if(trade.PositionClose(_Symbol))
               Print("BUY closed by Buffer1 condition.");
            else
               Print("Failed to close BUY. Error: ", GetLastError());
            return;
         }

         if(buffer6[0] != EMPTY_VALUE && buffer6[1] != EMPTY_VALUE)
         {
            if(close1 < buffer6[0] && close2 < buffer6[1])
            {
               if(trade.PositionClose(_Symbol))
                  Print("BUY closed by Buffer6 last 2 candles close condition.");
               else
                  Print("Failed to close BUY. Error: ", GetLastError());
               return;
            }
         }
      }

      if(type == POSITION_TYPE_SELL)
      {
         if(buffer4[0] != EMPTY_VALUE && open1 > buffer4[0] && close1 < buffer4[0])
         {
            if(trade.PositionClose(_Symbol))
               Print("SELL closed by Buffer4 condition.");
            else
               Print("Failed to close SELL. Error: ", GetLastError());
            return;
         }

         if(buffer3[0] != EMPTY_VALUE && buffer3[1] != EMPTY_VALUE)
         {
            if(close1 > buffer3[0] && close2 > buffer3[1])
            {
               if(trade.PositionClose(_Symbol))
                  Print("SELL closed by Buffer3 last 2 candles close condition.");
               else
                  Print("Failed to close SELL. Error: ", GetLastError());
               return;
            }
         }
      }
   }
}
