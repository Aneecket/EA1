//+------------------------------------------------------------------+
//|                         r0DL_AG_Trader.mq4                       |
//|   Trade based on current direction + r0AG == "1 bars ago"       |
//+------------------------------------------------------------------+
#property strict

input double LotSize = 0.01;

int OnInit()
{
    Print("EA initialized. Waiting for r0DL + r0AG pattern...");
    return INIT_SUCCEEDED;
}

void OnDeinit(const int reason)
{
    Print("EA stopped.");
}

void OnTick()
{
    static datetime lastBarTime = 0;
    datetime currentBarTime = iTime(Symbol(), PERIOD_M1, 0);
    if (currentBarTime == lastBarTime)
        return;  // Wait for new bar
    lastBarTime = currentBarTime;

    // Step 1: Get direction from r0DL
    string currentDirection = "";
    if (ObjectFind(0, "r0DL") >= 0)
    {
        string desc = ObjectDescription("r0DL");
        if (StringFind(desc, "Bearish") != -1)
            currentDirection = "Bearish";
        else if (StringFind(desc, "Bullish") != -1)
            currentDirection = "Bullish";
        else
            return; // No valid signal
    }
    else
    {
        Print("Object 'r0DL' not found.");
        return;
    }

    // Step 2: Read bar age from r0AG
    string barAgeText = "";
    if (ObjectFind(0, "r0AG") >= 0)
    {
        barAgeText = ObjectDescription("r0AG");
    }
    else
    {
        Print("Object 'r0AG' not found.");
        return;
    }

    // Step 3: Check if bar age is exactly "1 bars ago"
    if (barAgeText != "1 bars ago")
    {
        Print("r0AG is not 1 bar ago. Skipping.");
        return;
    }

    // Step 4: Log signal
    string timeStr = TimeToString(TimeCurrent(), TIME_DATE | TIME_SECONDS);
    Print("Signal: ", currentDirection, " | Confirmed by r0AG='1 bars ago' | Time: ", timeStr);

    // Step 5: Trade based on current direction
    if (currentDirection == "Bullish")
    {
        CloseAllTrades(OP_SELL);  // Close opposite trades
        OpenTrade(OP_BUY);
    }
    else if (currentDirection == "Bearish")
    {
        CloseAllTrades(OP_BUY);  // Close opposite trades
        OpenTrade(OP_SELL);
    }
}

//+------------------------------------------------------------------+
//| Opens a trade of the given type                                  |
//+------------------------------------------------------------------+
void OpenTrade(int type)
{
    double price = (type == OP_BUY) ? Ask : Bid;
    int slippage = 3;

    int ticket = OrderSend(Symbol(), type, LotSize, price, slippage, 0, 0, "r0DL EA", 0, 0, clrBlue);
    if (ticket > 0)
        Print((type == OP_BUY ? "BUY" : "SELL"), " trade opened. Ticket: ", ticket);
    else
        Print("Failed to open trade. Error: ", GetLastError());
}

//+------------------------------------------------------------------+
//| Closes all trades of given type                                  |
//+------------------------------------------------------------------+
void CloseAllTrades(int type)
{
    for (int i = OrdersTotal() - 1; i >= 0; i--)
    {
        if (OrderSelect(i, SELECT_BY_POS, MODE_TRADES))
        {
            if (OrderSymbol() == Symbol() && OrderType() == type)
            {
                double closePrice = (type == OP_BUY) ? Bid : Ask;
                if (OrderClose(OrderTicket(), OrderLots(), closePrice, 3, clrRed))
                    Print("Closed ", (type == OP_BUY ? "BUY" : "SELL"), " trade. Ticket: ", OrderTicket());
                else
                    Print("Failed to close trade. Error: ", GetLastError());
            }
        }
    }
}
