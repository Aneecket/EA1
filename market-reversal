#property strict

input double LotSize = 0.01;

// TP/SL configuration
input bool EnableTPnSL = true;
input int TakeProfitPoints = 100;
input int StopLossPoints = 100;

// Day restrictions
input bool AllowFridayTrading = true;
input bool AllowSaturdayTrading = false;
input bool AllowSundayTrading = false;

// Cooldown in minutes
input int CooldownMinutes = 3;

// Session Trading Time Controls
input bool EnableMorningSession = true;
input int MorningStartHour = 6;
input int MorningStartMinute = 0;
input int MorningEndHour = 11;
input int MorningEndMinute = 59;

input bool EnableAfternoonSession = true;
input int AfternoonStartHour = 12;
input int AfternoonStartMinute = 0;
input int AfternoonEndHour = 17;
input int AfternoonEndMinute = 59;

input bool EnableEveningSession = true;
input int EveningStartHour = 18;
input int EveningStartMinute = 0;
input int EveningEndHour = 23;
input int EveningEndMinute = 59;

// Multi-trade control
input bool EnableMultipleTrades = true;

datetime lastTradeTime = D'1970.01.01 00:00';

int OnInit()
{
    Print("EA initialized. Waiting for r0DL + r0AG pattern with cooldown...");
    return INIT_SUCCEEDED;
}

void OnDeinit(const int reason)
{
    Print("EA stopped.");
}

void OnTick()
{
    static datetime lastBarTime = 0;
    datetime currentBarTime = Time[0];
    if (currentBarTime == lastBarTime)
        return;
    lastBarTime = currentBarTime;

    int day = TimeDayOfWeek(TimeCurrent());
    if ((day == 5 && !AllowFridayTrading) ||
        (day == 6 && !AllowSaturdayTrading) ||
        (day == 0 && !AllowSundayTrading))
    {
        Print("Trading not allowed today. Skipping...");
        return;
    }

    string currentDirection = "";
    if (ObjectFind(0, "r0DL") >= 0)
    {
        string desc = ObjectDescription("r0DL");
        if (StringFind(desc, "Bearish") != -1)
            currentDirection = "Bearish";
        else if (StringFind(desc, "Bullish") != -1)
            currentDirection = "Bullish";
        else
            return;
    }
    else
    {
        Print("Object 'r0DL' not found.");
        return;
    }

    string barAgeText = "";
    if (ObjectFind(0, "r0AG") >= 0)
    {
        barAgeText = ObjectDescription("r0AG");
    }
    else
    {
        Print("Object 'r0AG' not found.");
        return;
    }

    if (barAgeText != "1 bars ago")
    {
        Print("r0AG != '1 bars ago'. Skipping.");
        return;
    }

    string timeStr = TimeToString(TimeCurrent(), TIME_DATE | TIME_SECONDS);
    Print("Signal: ", currentDirection, " | Confirmed by r0AG='1 bars ago' | Time: ", timeStr);

    // === Trade Closing Always Allowed ===
    if (currentDirection == "Bullish")
    {
        CloseAllTrades(OP_SELL);
    }
    else if (currentDirection == "Bearish")
    {
        CloseAllTrades(OP_BUY);
    }

    // === Trade Opening Only in Allowed Hours ===
    if (!IsTradingSessionAllowed(TimeCurrent()))
    {
        Print("Outside allowed trading sessions. Skipping trade opening...");
        return;
    }

    // === Trade Opening with Cooldown Check ===
    if (currentDirection == "Bullish")
    {
        if (!EnableMultipleTrades && IsTradeOpen(OP_BUY))
        {
            Print("BUY trade already open. Skipping due to single trade restriction.");
            return;
        }

        if (TimeCurrent() - lastTradeTime >= CooldownMinutes * 60)
        {
            OpenTrade(OP_BUY);
            lastTradeTime = TimeCurrent();
        }
        else
        {
            Print("Cooldown active: skipping BUY trade.");
        }
    }
    else if (currentDirection == "Bearish")
    {
        if (!EnableMultipleTrades && IsTradeOpen(OP_SELL))
        {
            Print("SELL trade already open. Skipping due to single trade restriction.");
            return;
        }

        if (TimeCurrent() - lastTradeTime >= CooldownMinutes * 60)
        {
            OpenTrade(OP_SELL);
            lastTradeTime = TimeCurrent();
        }
        else
        {
            Print("Cooldown active: skipping SELL trade.");
        }
    }
}

bool IsTradingSessionAllowed(datetime t)
{
    int hour = TimeHour(t);
    int minute = TimeMinute(t);

    if (EnableMorningSession &&
        TimeInRange(hour, minute, MorningStartHour, MorningStartMinute, MorningEndHour, MorningEndMinute))
        return true;

    if (EnableAfternoonSession &&
        TimeInRange(hour, minute, AfternoonStartHour, AfternoonStartMinute, AfternoonEndHour, AfternoonEndMinute))
        return true;

    if (EnableEveningSession &&
        TimeInRange(hour, minute, EveningStartHour, EveningStartMinute, EveningEndHour, EveningEndMinute))
        return true;

    return false;
}

bool TimeInRange(int h, int m, int sh, int sm, int eh, int em)
{
    int current = h * 60 + m;
    int start = sh * 60 + sm;
    int end = eh * 60 + em;
    return (current >= start && current <= end);
}

void OpenTrade(int type)
{
    double price = (type == OP_BUY) ? Ask : Bid;
    int slippage = 3;
    double tp = 0, sl = 0;

    if (EnableTPnSL)
    {
        double point = MarketInfo(Symbol(), MODE_POINT);
        double multiplier = MarketInfo(Symbol(), MODE_DIGITS) == 3 || MarketInfo(Symbol(), MODE_DIGITS) == 5 ? 10.0 : 1.0;

        if (type == OP_BUY)
        {
            tp = price + TakeProfitPoints * point * multiplier;
            sl = price - StopLossPoints * point * multiplier;
        }
        else if (type == OP_SELL)
        {
            tp = price - TakeProfitPoints * point * multiplier;
            sl = price + StopLossPoints * point * multiplier;
        }
    }

    int ticket = OrderSend(Symbol(), type, LotSize, price, slippage, sl, tp, "r0DL EA", 0, 0, clrBlue);
    if (ticket > 0)
        Print((type == OP_BUY ? "BUY" : "SELL"), " trade opened. Ticket: ", ticket);
    else
        Print("Failed to open trade. Error: ", GetLastError());
}

void CloseAllTrades(int type)
{
    for (int i = OrdersTotal() - 1; i >= 0; i--)
    {
        if (OrderSelect(i, SELECT_BY_POS, MODE_TRADES))
        {
            if (OrderSymbol() == Symbol() && OrderType() == type)
            {
                double closePrice = (type == OP_BUY) ? Bid : Ask;
                if (OrderClose(OrderTicket(), OrderLots(), closePrice, 3, clrRed))
                    Print("Closed ", (type == OP_BUY ? "BUY" : "SELL"), " trade. Ticket: ", OrderTicket());
                else
                    Print("Failed to close trade. Error: ", GetLastError());
            }
        }
    }
}

bool IsTradeOpen(int type)
{
    for (int i = OrdersTotal() - 1; i >= 0; i--)
    {
        if (OrderSelect(i, SELECT_BY_POS, MODE_TRADES))
        {
            if (OrderSymbol() == Symbol() && OrderType() == type)
                return true;
        }
    }
    return false;
}
