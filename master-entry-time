#property strict

string labelName = "ultradeforex_dlable20";
datetime lastBarTime = 0;
string prevSignal = "";
string currentSignal = "";

input double lotSize = 0.01;  // Set your lot size here

// Check if current time is within allowed trading open hours
bool IsOpenTradeAllowed()
{
    int hour = TimeHour(TimeCurrent());
    int minute = TimeMinute(TimeCurrent());

    // Interval 1: 08:30 – 10:00
    if ((hour == 8 && minute >= 30) || (hour == 9) || (hour == 10 && minute == 0))
        return true;

    // Interval 2: 14:00 – 16:00
    if ((hour >= 14 && hour < 16) || (hour == 16 && minute == 0))
        return true;

    // Interval 3: 17:00 – 18:00
    if ((hour == 17) || (hour == 18 && minute == 0))
        return true;

    return false;
}

int OnInit()
{
    Print("EA initialized");
    lastBarTime = 0;
    return(INIT_SUCCEEDED);
}

void OnDeinit(const int reason)
{
    Print("EA deinitialized");
}

void OnTick()
{
    datetime currentBarTime = iTime(Symbol(), PERIOD_CURRENT, 0);
    if (currentBarTime != lastBarTime)
    {
        lastBarTime = currentBarTime;

        // Shift signals
        prevSignal = currentSignal;
        currentSignal = "";

        // Check if label exists
        if (ObjectFind(0, labelName) >= 0)
        {
               currentSignal = StringTrimLeft(StringTrimRight(ObjectGetString(0, labelName, OBJPROP_TEXT)));


            Print("Previous Signal: ", prevSignal, " | Current Signal: ", currentSignal);

            if ((currentSignal == "BUY" && prevSignal == "SELL") || (currentSignal == "SELL" && prevSignal == "BUY"))
            {
                int totalTrades = OrdersTotal();
                bool buyExists = false;
                bool sellExists = false;
                int buyTicket = -1;
                int sellTicket = -1;

                for (int i = 0; i < totalTrades; i++)
                {
                    if (OrderSelect(i, SELECT_BY_POS, MODE_TRADES))
                    {
                        if (OrderSymbol() == Symbol())
                        {
                            if (OrderType() == OP_BUY)
                            {
                                buyExists = true;
                                buyTicket = OrderTicket();
                            }
                            else if (OrderType() == OP_SELL)
                            {
                                sellExists = true;
                                sellTicket = OrderTicket();
                            }
                        }
                    }
                }

                if (currentSignal == "BUY")
                {
                    Print("Signal: BUY");

                    if (sellExists)
                        CloseOrder(sellTicket);

                    if (!buyExists && IsOpenTradeAllowed())
                        OpenOrder(OP_BUY);
                    else if (!buyExists)
                        Print("Not allowed to open BUY trade now. Time restrictions in place.");
                }
                else if (currentSignal == "SELL")
                {
                    Print("Signal: SELL");

                    if (buyExists)
                        CloseOrder(buyTicket);

                    if (!sellExists && IsOpenTradeAllowed())
                        OpenOrder(OP_SELL);
                    else if (!sellExists)
                        Print("Not allowed to open SELL trade now. Time restrictions in place.");
                }
            }
            else
            {
                Print("No signal change or invalid signal. No action taken.");
            }
        }
        else
        {
            Print("Label '", labelName, "' not found on the chart");
        }
    }
}

void CloseOrder(int ticket)
{
    if (ticket < 0)
        return;

    if (OrderSelect(ticket, SELECT_BY_TICKET))
    {
        double closePrice = 0;
        int cmd = OrderType();
        if (cmd == OP_BUY)
            closePrice = MarketInfo(OrderSymbol(), MODE_BID);
        else if (cmd == OP_SELL)
            closePrice = MarketInfo(OrderSymbol(), MODE_ASK);
        else
            return;

        bool result = OrderClose(ticket, OrderLots(), closePrice, 3, clrRed);
        if (result)
            Print("Closed order #", ticket);
        else
            Print("Failed to close order #", ticket, " Error: ", GetLastError());
    }
}

void OpenOrder(int orderType)
{
    double price = 0;
    if (orderType == OP_BUY)
        price = MarketInfo(Symbol(), MODE_ASK);
    else if (orderType == OP_SELL)
        price = MarketInfo(Symbol(), MODE_BID);
    else
        return;

    int ticket = OrderSend(Symbol(), orderType, lotSize, price, 3, 0, 0, "Signal trade", 0, 0, clrGreen);
    if (ticket > 0)
        Print("Opened ", orderType == OP_BUY ? "BUY" : "SELL", " order #", ticket);
    else
        Print("Failed to open ", orderType == OP_BUY ? "BUY" : "SELL", " order. Error: ", GetLastError());
}
