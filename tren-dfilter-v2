//+------------------------------------------------------------------+
//| TrendFilterMartingaleEA.mq4                                     |
//+------------------------------------------------------------------+
#property strict

extern double LotSize = 0.01;
extern int    Slippage = 100;
extern bool   EnableSLTP = false;
extern double StopLossPips = 100.0;
extern double TakeProfitPips = 100.0;

extern bool   EnableMartingale = true;
extern string TradingStrategy = "last_trade"; // "cumulative" or "last_trade"
extern double MartingaleFactor = 2.0;
extern double MaxLotSize = 10.0;
extern double MaxCumulativeLoss = 100.0;
extern double MaxLastTradeLoss = 100.0;

extern int Stage1Count = 5;
extern int Stage2Count = 5;
extern int Stage3Count = 5;

extern double Stage1Multiplier = 1.5;
extern double Stage2Multiplier = 2.0;
extern double Stage3Multiplier = 2.5;

extern int     MA_Filter_Period = 20;
extern int     MA_Method = MODE_EMA;

int martingaleLossCount = 0;
string lastCandleSignal = "";
string lastSignal = "";
double lastUsedLotSize = 0.01;
double cumulativeLoss = 0.0;
double lastTradeProfit = 0.0;
datetime lastBarTime = 0;
int MagicNumber;

//+------------------------------------------------------------------+
int OnInit()
{
   MagicNumber = (int)TimeLocal();
   Print("üü¢ EA Initialized | Symbol: ", Symbol(), " | TF: ", Period());
   return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
void OnTick()
{
   if (!IsTradeAllowed()) return;
   RefreshRates();

   datetime currentBarTime = Time[0];
   if (currentBarTime != lastBarTime)
   {
      lastCandleSignal = GetTrendFilterSignal();
      Print("üíæ Detected TrendFilter signal from closed candle: ", lastCandleSignal);

      if (lastCandleSignal == "BUY" || lastCandleSignal == "SELL")
      {
         string signal = lastCandleSignal;
         Print("üïí New Candle | Acting on Trend Signal: ", signal);

         if (signal != lastSignal || !IsSameDirectionTradeOpen(signal))
         {
            HandleCloseOpposite(signal);
            HandleMartingaleLogic();
            HandleOpenNewTrade(signal);
            lastSignal = signal;
         }
      }

      lastBarTime = currentBarTime;
   }
}

//+------------------------------------------------------------------+
//| Trend Filter Signal using HA + MA logic                         |
//+------------------------------------------------------------------+
string GetTrendFilterSignal()
{
   int i = 1; // last closed candle

   double haCloseNext = (Open[i+1] + High[i+1] + Low[i+1] + Close[i+1]) / 4;
   double haOpenNext = (i+1 == Bars - 1) ? (Open[i+1] + Close[i+1]) / 2 : (Open[i+2] + Close[i+2]) / 2;

   double haClose = (Open[i] + High[i] + Low[i] + Close[i]) / 4;
   double haOpen = (haOpenNext + haCloseNext) / 2;
   double haHigh = MathMax(High[i], MathMax(haOpen, haClose));
   double haLow = MathMin(Low[i], MathMin(haOpen, haClose));

   double ma = iMA(NULL, 0, MA_Filter_Period, 0, MA_Method, PRICE_CLOSE, i);

   bool isBuy = (haClose > haOpen && haClose > ma && haOpen > haLow && haClose > High[i+1]);
   bool isSell = (haClose < haOpen && haClose < ma && haOpen < haHigh && haClose < Low[i+1]);

   if (isBuy)
      return "BUY";
   else if (isSell)
      return "SELL";
   else
      return "NO SIGNAL";
}

//+------------------------------------------------------------------+
bool IsSameDirectionTradeOpen(string signal)
{
   for (int j = 0; j < OrdersTotal(); j++)
   {
      if (OrderSelect(j, SELECT_BY_POS, MODE_TRADES))
      {
         if (OrderSymbol() == Symbol() && OrderMagicNumber() == MagicNumber)
         {
            if ((signal == "BUY" && OrderType() == OP_BUY) ||
                (signal == "SELL" && OrderType() == OP_SELL))
               return true;
         }
      }
   }
   return false;
}

//+------------------------------------------------------------------+
void HandleCloseOpposite(string signal)
{
   for (int j = OrdersTotal() - 1; j >= 0; j--)
   {
      if (OrderSelect(j, SELECT_BY_POS, MODE_TRADES))
      {
         if (OrderSymbol() == Symbol() && OrderMagicNumber() == MagicNumber)
         {
            if ((signal == "BUY" && OrderType() == OP_SELL) ||
                (signal == "SELL" && OrderType() == OP_BUY))
            {
               double closePrice = (OrderType() == OP_BUY ? Bid : Ask);
               if (OrderClose(OrderTicket(), OrderLots(), closePrice, Slippage, clrRed))
               {
                  if (OrderSelect(OrderTicket(), SELECT_BY_TICKET, MODE_HISTORY))
                  {
                     lastTradeProfit = OrderProfit();
                     if (TradingStrategy == "cumulative")
                        cumulativeLoss += lastTradeProfit;

                     if (lastTradeProfit < 0)
                        Print("üî¥ Loss: ", lastTradeProfit, " | Cumulative: ", cumulativeLoss);
                     else
                        Print("üü¢ Profit: ", lastTradeProfit, " | Cumulative: ", cumulativeLoss);
                  }
               }
               else
               {
                  Print("‚ùå Failed to close | Error: ", GetLastError());
               }
            }
         }
      }
   }
}

//+------------------------------------------------------------------+
void HandleMartingaleLogic()
{
   if (!EnableMartingale)
   {
      lastUsedLotSize = LotSize;
      martingaleLossCount = 0;
      return;
   }

   if (lastTradeProfit < 0)
   {
      martingaleLossCount++;

      double multiplier = 1.0;

      if (martingaleLossCount <= Stage1Count)
         multiplier = Stage1Multiplier;
      else if (martingaleLossCount <= (Stage1Count + Stage2Count))
         multiplier = Stage2Multiplier;
      else
         multiplier = Stage3Multiplier;

      if (lastUsedLotSize <= 0)
         lastUsedLotSize = LotSize;

      lastUsedLotSize *= multiplier;
   }
   else
   {
      martingaleLossCount = 0;
      lastUsedLotSize = LotSize;
      cumulativeLoss = 0.0;
   }

   if (lastUsedLotSize > MaxLotSize)
      lastUsedLotSize = MaxLotSize;

   Print("üìä Martingale Loss Count: ", martingaleLossCount,
         " | New Lot Size: ", lastUsedLotSize);
}

//+------------------------------------------------------------------+
void HandleOpenNewTrade(string signal)
{
   bool hasCorrectOrder = false;

   for (int j = 0; j < OrdersTotal(); j++)
   {
      if (OrderSelect(j, SELECT_BY_POS, MODE_TRADES))
      {
         if (OrderSymbol() == Symbol() && OrderMagicNumber() == MagicNumber)
         {
            if ((signal == "BUY" && OrderType() == OP_BUY) ||
                (signal == "SELL" && OrderType() == OP_SELL))
            {
               hasCorrectOrder = true;
               break;
            }
         }
      }
   }

   if (hasCorrectOrder) return;

   double sl = 0, tp = 0;
   double point = MarketInfo(Symbol(), MODE_POINT);
   int digits = MarketInfo(Symbol(), MODE_DIGITS);
   double pip = (digits == 3 || digits == 5) ? 10 * point : point;

   if (EnableSLTP)
   {
      if (signal == "BUY")
      {
         sl = Ask - StopLossPips * pip;
         tp = Ask + TakeProfitPips * pip;
      }
      else
      {
         sl = Bid + StopLossPips * pip;
         tp = Bid - TakeProfitPips * pip;
      }
   }

   int ticket = -1;
   if (signal == "BUY")
      ticket = OrderSend(Symbol(), OP_BUY, lastUsedLotSize, Ask, Slippage, sl, tp, "TF BUY", MagicNumber, 0, clrBlue);
   else if (signal == "SELL")
      ticket = OrderSend(Symbol(), OP_SELL, lastUsedLotSize, Bid, Slippage, sl, tp, "TF SELL", MagicNumber, 0, clrRed);

   if (ticket > 0)
      Print("üöÄ Opened ", signal, " | Ticket: ", ticket);
   else
      Print("‚ùå Failed to open ", signal, " | Error: ", GetLastError());
}
